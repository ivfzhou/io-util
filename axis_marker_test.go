/*
 * Copyright (c) 2023 ivfzhou
 * io-util is licensed under Mulan PSL v2.
 * You can use this software according to the terms and conditions of the Mulan PSL v2.
 * You may obtain a copy of Mulan PSL v2 at:
 *          http://license.coscl.org.cn/MulanPSL2
 * THIS SOFTWARE IS PROVIDED ON AN "AS IS" BASIS, WITHOUT WARRANTIES OF ANY KIND,
 * EITHER EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO NON-INFRINGEMENT,
 * MERCHANTABILITY OR FIT FOR A PARTICULAR PURPOSE.
 * See the Mulan PSL v2 for more details.
 */

package io_util_test

import (
	"fmt"
	"math/rand"
	"testing"

	iu "gitee.com/ivfzhou/io-util"
)

func TestAxisMarker_Mark(t *testing.T) {
	tests := []struct {
		name           string
		offset, length int
		expectedResult string
	}{
		{
			"0 号位左边不接壤：与下一个元素左边不接壤",
			8, 0,
			"{[10,30), [40,60), [70,90)}",
		},
		{
			"0 号位左边不接壤：与下一个元素左边不接壤",
			9, -1,
			"{[8,9), [10,30), [40,60), [70,90)}",
		},
		{
			"0 号位左边不接壤：与下一个元素左边不接壤",
			8, 1,
			"{[8,9), [10,30), [40,60), [70,90)}",
		},
		{
			"0 号位左边不接壤：与下一个元素左边接壤",
			8, 2,
			"{[8,30), [40,60), [70,90)}",
		},
		{
			"0 号位左边不接壤：与下一个元素左边相等",
			8, 3,
			"{[8,30), [40,60), [70,90)}",
		},
		{
			"0 号位左边不接壤：超过下一个元素左边",
			8, 4,
			"{[8,30), [40,60), [70,90)}",
		},
		{
			"0 号位左边不接壤：与下一个元素右边相等",
			8, 22,
			"{[8,30), [40,60), [70,90)}",
		},
		{
			"0 号位左边不接壤：超过下一个元素右边",
			8, 23,
			"{[8,31), [40,60), [70,90)}",
		},
		{
			"0 号位左边不接壤：超过下一个元素右边",
			8, 31,
			"{[8,39), [40,60), [70,90)}",
		},
		{
			"0 号位左边不接壤：与下下一个元素左边接壤",
			8, 32,
			"{[8,60), [70,90)}",
		},
		{
			"0 号位左边不接壤：与下下一个元素左边相等",
			8, 33,
			"{[8,60), [70,90)}",
		},
		{
			"0 号位左边不接壤：超过下下一个元素左边",
			8, 34,
			"{[8,60), [70,90)}",
		},
		{
			"0 号位左边不接壤：与下下一个元素右边相等",
			8, 52,
			"{[8,60), [70,90)}",
		},
		{
			"0 号位左边不接壤：超过下下一个元素右边",
			8, 53,
			"{[8,61), [70,90)}",
		},
		{
			"0 号位左边不接壤：超过下下一个元素右边",
			8, 61,
			"{[8,69), [70,90)}",
		},
		{
			"0 号位左边不接壤：与下下下一个元素左边接壤",
			8, 62,
			"{[8,90)}",
		},
		{
			"0 号位左边不接壤：与下下下一个元素左边接壤",
			8, 62,
			"{[8,90)}",
		},
		{
			"0 号位左边不接壤：超过下下下一个元素左边",
			8, 63,
			"{[8,90)}",
		},
		{
			"0 号位左边不接壤：与下下下一个元素右边相等",
			8, 82,
			"{[8,90)}",
		},
		{
			"0 号位左边不接壤：超过下下下一个元素右边",
			8, 83,
			"{[8,91)}",
		},
		{
			"0 号位左边接壤：与下一个元素左边相等",
			9, 1,
			"{[9,30), [40,60), [70,90)}",
		},
		{
			"0 号位左边接壤：超过下一个元素左边",
			9, 2,
			"{[9,30), [40,60), [70,90)}",
		},
		{
			"0 号位左边接壤：与下一个元素右边相等",
			9, 21,
			"{[9,30), [40,60), [70,90)}",
		},
		{
			"0 号位左边接壤：超过下一个元素右边",
			9, 22,
			"{[9,31), [40,60), [70,90)}",
		},
		{
			"0 号位左边接壤：超过下一个元素右边",
			9, 30,
			"{[9,39), [40,60), [70,90)}",
		},
		{
			"0 号位左边接壤：与下下一个元素左边接壤",
			9, 31,
			"{[9,60), [70,90)}",
		},
		{
			"0 号位左边接壤：与下下一个元素左边相等",
			9, 32,
			"{[9,60), [70,90)}",
		},
		{
			"0 号位左边接壤：超过下下一个元素左边",
			9, 33,
			"{[9,60), [70,90)}",
		},
		{
			"0 号位左边接壤：与下下一个元素右边相等",
			9, 51,
			"{[9,60), [70,90)}",
		},
		{
			"0 号位左边接壤：超过下下一个元素右边",
			9, 52,
			"{[9,61), [70,90)}",
		},
		{
			"0 号位左边接壤：超过下下一个元素右边",
			9, 60,
			"{[9,69), [70,90)}",
		},
		{
			"0 号位左边接壤：与下下下一个元素左边接壤",
			9, 61,
			"{[9,90)}",
		},
		{
			"0 号位左边接壤：与下下下一个元素左边相等",
			9, 62,
			"{[9,90)}",
		},
		{
			"0 号位左边接壤：超过下下下一个元素左边",
			9, 63,
			"{[9,90)}",
		},
		{
			"0 号位左边接壤：与下下下一个元素右边相等",
			9, 81,
			"{[9,90)}",
		},
		{
			"0 号位左边接壤：与超过下下下一个元素右边",
			9, 82,
			"{[9,91)}",
		},
		{
			"0 号位左边相等：超过下一个元素左边",
			10, 1,
			"{[10,30), [40,60), [70,90)}",
		},
		{
			"0 号位左边相等：与下一个元素右边相等",
			10, 20,
			"{[10,30), [40,60), [70,90)}",
		},
		{
			"0 号位左边相等：超过下一个元素右边",
			10, 21,
			"{[10,31), [40,60), [70,90)}",
		},
		{
			"0 号位左边相等：超过下一个元素右边",
			10, 29,
			"{[10,39), [40,60), [70,90)}",
		},
		{
			"0 号位左边相等：与下下一个元素左边接壤",
			10, 30,
			"{[10,60), [70,90)}",
		},
		{
			"0 号位左边相等：与下下一个元素左边相等",
			10, 31,
			"{[10,60), [70,90)}",
		},
		{
			"0 号位左边相等：超过与下下一个元素左边",
			10, 32,
			"{[10,60), [70,90)}",
		},
		{
			"0 号位左边相等：与下下一个元素右边相等",
			10, 50,
			"{[10,60), [70,90)}",
		},
		{
			"0 号位左边相等：超过下下一个元素右边",
			10, 51,
			"{[10,61), [70,90)}",
		},
		{
			"0 号位左边相等：超过下下一个元素右边",
			10, 59,
			"{[10,69), [70,90)}",
		},
		{
			"0 号位左边相等：与下下下一个元素左边接壤",
			10, 60,
			"{[10,90)}",
		},
		{
			"0 号位左边相等：与下下下一个元素左边相等",
			10, 61,
			"{[10,90)}",
		},
		{
			"0 号位左边相等：超过下下下一个元素左边",
			10, 62,
			"{[10,90)}",
		},
		{
			"0 号位左边相等：与下下下一个元素右边相等",
			10, 80,
			"{[10,90)}",
		},
		{
			"0 号位左边相等：超过下下下一个元素右边",
			10, 81,
			"{[10,91)}",
		},
		{
			"超过 0 号位左边：与下一个元素右边接壤",
			11, 18,
			"{[10,30), [40,60), [70,90)}",
		},
		{
			"超过 0 号位左边：与下一个元素右边相等",
			11, 19,
			"{[10,30), [40,60), [70,90)}",
		},
		{
			"超过 0 号位左边：与下一个元素右边相等",
			11, 19,
			"{[10,30), [40,60), [70,90)}",
		},
		{
			"超过 0 号位左边：超过下一个元素右边",
			11, 28,
			"{[10,39), [40,60), [70,90)}",
		},
		{
			"超过 0 号位左边：与下下一个元素左边接壤",
			11, 29,
			"{[10,60), [70,90)}",
		},
		{
			"超过 0 号位左边：与下下一个元素左边相等",
			11, 30,
			"{[10,60), [70,90)}",
		},
		{
			"超过 0 号位左边：超过下下一个元素左边",
			11, 31,
			"{[10,60), [70,90)}",
		},
		{
			"超过 0 号位左边：与下下一个元素右边相等",
			11, 49,
			"{[10,60), [70,90)}",
		},
		{
			"超过 0 号位左边：超过下下一个元素右边",
			11, 50,
			"{[10,61), [70,90)}",
		},
		{
			"超过 0 号位左边：超过下下一个元素右边",
			11, 58,
			"{[10,69), [70,90)}",
		},
		{
			"超过 0 号位左边：与下下下一个元素左边接壤",
			11, 59,
			"{[10,90)}",
		},
		{
			"超过 0 号位左边：与下下下一个元素左边相等",
			11, 60,
			"{[10,90)}",
		},
		{
			"超过 0 号位左边：超过下下下一个元素左边",
			11, 61,
			"{[10,90)}",
		},
		{
			"超过 0 号位左边：与下下下一个元素右边相等",
			11, 79,
			"{[10,90)}",
		},
		{
			"超过 0 号位左边：超过下下下一个元素右边",
			11, 80,
			"{[10,91)}",
		},
		{
			"等于 0 号位右边：超过下一个元素右边",
			29, 2,
			"{[10,31), [40,60), [70,90)}",
		},
		{
			"等于 0 号位右边：与下下一个元素左边接壤",
			29, 20,
			"{[10,60), [70,90)}",
		},
		{
			"等于 0 号位右边：与下下一个元素左边相等",
			29, 21,
			"{[10,60), [70,90)}",
		},
		{
			"等于 0 号位右边：超过下下一个元素左边",
			29, 22,
			"{[10,60), [70,90)}",
		},
		{
			"等于 0 号位右边：与下下一个元素右边相等",
			29, 31,
			"{[10,60), [70,90)}",
		},
		{
			"等于 0 号位右边：超过下下一个元素右边",
			29, 32,
			"{[10,61), [70,90)}",
		},
		{
			"等于 0 号位右边：超过下下一个元素右边",
			29, 40,
			"{[10,69), [70,90)}",
		},
		{
			"等于 0 号位右边：与下下下一个元素左边接壤",
			29, 41,
			"{[10,90)}",
		},
		{
			"等于 0 号位右边：等下下下一个元素左边",
			29, 42,
			"{[10,90)}",
		},
		{
			"等于 0 号位右边：超过下下下一个元素左边",
			29, 43,
			"{[10,90)}",
		},
		{
			"等于 0 号位右边：等于下下下一个元素右边",
			29, 61,
			"{[10,90)}",
		},
		{
			"等于 0 号位右边：超过下下下一个元素右边",
			29, 62,
			"{[10,91)}",
		},
		{
			"与 0 号位右边接壤：超过下一个元素右边",
			30, 1,
			"{[10,31), [40,60), [70,90)}",
		},
		{
			"与 0 号位右边接壤：与下下一个元素左边接壤",
			30, 10,
			"{[10,60), [70,90)}",
		},
		{
			"与 0 号位右边接壤：与下下一个元素左边相等",
			30, 11,
			"{[10,60), [70,90)}",
		},
		{
			"与 0 号位右边接壤：超过下下一个元素左边",
			30, 12,
			"{[10,60), [70,90)}",
		},
		{
			"与 0 号位右边接壤：与下下一个元素右边相等",
			30, 30,
			"{[10,60), [70,90)}",
		},
		{
			"与 0 号位右边接壤：超过下下一个元素右边",
			30, 31,
			"{[10,61), [70,90)}",
		},
		{
			"与 0 号位右边接壤：超过下下一个元素右边",
			30, 39,
			"{[10,69), [70,90)}",
		},
		{
			"与 0 号位右边接壤：与下下下一个元素左边接壤",
			30, 40,
			"{[10,90)}",
		},
		{
			"与 0 号位右边接壤：与下下下一个元素左边相等",
			30, 41,
			"{[10,90)}",
		},
		{
			"与 0 号位右边接壤：超过下下下一个元素左边",
			30, 42,
			"{[10,90)}",
		},
		{
			"与 0 号位右边接壤：与下下下一个元素右边相等",
			30, 60,
			"{[10,90)}",
		},
		{
			"与 0 号位右边接壤：超过下下下一个元素右边",
			30, 61,
			"{[10,91)}",
		},
		{
			"超过 0 号位右边：在下一个元素左边",
			31, 8,
			"{[10,30), [31,39), [40,60), [70,90)}",
		},
		{
			"超过 0 号位右边：与下一个元素左边接壤",
			31, 9,
			"{[10,30), [31,60), [70,90)}",
		},
		{
			"超过 0 号位右边：与下一个元素左边相等",
			31, 10,
			"{[10,30), [31,60), [70,90)}",
		},
		{
			"超过 0 号位右边：与下一个元素左边相交",
			31, 28,
			"{[10,30), [31,60), [70,90)}",
		},
		{
			"超过 0 号位右边：与下一个元素右边相等",
			31, 29,
			"{[10,30), [31,60), [70,90)}",
		},
		{
			"超过 0 号位右边：超过下一个元素右边",
			31, 30,
			"{[10,30), [31,61), [70,90)}",
		},
		{
			"超过 0 号位右边：与下下一个元素左边接壤",
			31, 39,
			"{[10,30), [31,90)}",
		},
		{
			"超过 0 号位右边：与下下一个元素左边相等",
			31, 40,
			"{[10,30), [31,90)}",
		},
		{
			"超过 0 号位右边：超过下下一个元素左边",
			31, 41,
			"{[10,30), [31,90)}",
		},
		{
			"超过 0 号位右边：与下下一个元素右边相等",
			31, 59,
			"{[10,30), [31,90)}",
		},
		{
			"超过 0 号位右边：超过下下一个元素右边",
			31, 60,
			"{[10,30), [31,91)}",
		},
		{
			"与 1 号位左边相等：超过下一个元素左边",
			40, 1,
			"{[10,30), [40,60), [70,90)}",
		},
		{
			"与 1 号位左边相等：与下一个元素右边相等",
			40, 20,
			"{[10,30), [40,60), [70,90)}",
		},
		{
			"与 1 号位左边相等：超过下一个元素右边",
			40, 21,
			"{[10,30), [40,61), [70,90)}",
		},
		{
			"与 1 号位左边相等：与下下个元素左边接壤",
			40, 30,
			"{[10,30), [40,90)}",
		},
		{
			"与 1 号位左边相等：与下下个元素左边相等",
			40, 31,
			"{[10,30), [40,90)}",
		},
		{
			"与 1 号位左边相等：超过下下个元素左边",
			40, 32,
			"{[10,30), [40,90)}",
		},
		{
			"与 1 号位左边相等：与下下个元素右边相等",
			40, 50,
			"{[10,30), [40,90)}",
		},
		{
			"与 1 号位左边相等：超过下下个元素右边",
			40, 51,
			"{[10,30), [40,91)}",
		},
		{
			"超过 1 号位左边：超过下个元素左边",
			41, 1,
			"{[10,30), [40,60), [70,90)}",
		},
		{
			"超过 1 号位左边：与下个元素右边相等",
			41, 19,
			"{[10,30), [40,60), [70,90)}",
		},
		{
			"超过 1 号位左边：超过下个元素右边",
			41, 20,
			"{[10,30), [40,61), [70,90)}",
		},
		{
			"超过 1 号位左边：与下下个元素左边接壤",
			41, 29,
			"{[10,30), [40,90)}",
		},
		{
			"超过 1 号位左边：与下下个元素左边相等",
			41, 30,
			"{[10,30), [40,90)}",
		},
		{
			"超过 1 号位左边：超过下下个元素左边",
			41, 31,
			"{[10,30), [40,90)}",
		},
		{
			"超过 1 号位左边：与下下个元素右边相等",
			41, 49,
			"{[10,30), [40,90)}",
		},
		{
			"超过 1 号位左边：超过下下个元素右边",
			41, 50,
			"{[10,30), [40,91)}",
		},
		{
			"与 1 号位右边相等：与下一个元素右边相等",
			59, 1,
			"{[10,30), [40,60), [70,90)}",
		},
		{
			"与 1 号位右边相等：超过下一个元素右边",
			59, 2,
			"{[10,30), [40,61), [70,90)}",
		},
		{
			"与 1 号位右边相等：与下下一个元素左边接壤",
			59, 20,
			"{[10,30), [40,90)}",
		},
		{
			"与 1 号位右边相等：与下下一个元素左边相等",
			59, 21,
			"{[10,30), [40,90)}",
		},
		{
			"与 1 号位右边相等：超过下下一个元素左边",
			59, 22,
			"{[10,30), [40,90)}",
		},
		{
			"与 1 号位右边相等：与下下一个元素右边相等",
			59, 31,
			"{[10,30), [40,90)}",
		},
		{
			"与 1 号位右边相等：超过下下一个元素右边",
			59, 32,
			"{[10,30), [40,91)}",
		},
		{
			"与 1 号位右边接壤：超过下一个元素右边",
			60, 1,
			"{[10,30), [40,61), [70,90)}",
		},
		{
			"与 1 号位右边接壤：与下下一个元素左边接壤",
			60, 10,
			"{[10,30), [40,90)}",
		},
		{
			"与 1 号位右边接壤：与下下一个元素左边相等",
			60, 11,
			"{[10,30), [40,90)}",
		},
		{
			"与 1 号位右边接壤：超过下下一个元素左边",
			60, 12,
			"{[10,30), [40,90)}",
		},
		{
			"与 1 号位右边接壤：与下下一个元素右边相等",
			60, 30,
			"{[10,30), [40,90)}",
		},
		{
			"与 1 号位右边接壤：超过下下一个元素右边",
			60, 31,
			"{[10,30), [40,91)}",
		},
		{
			"超过 1 号位右边：超过下一个元素右边",
			61, 1,
			"{[10,30), [40,60), [61,62), [70,90)}",
		},
		{
			"超过 1 号位右边：与下下一个元素左边接壤",
			61, 9,
			"{[10,30), [40,60), [61,90)}",
		},
		{
			"超过 1 号位右边：与下下一个元素左边相等",
			61, 10,
			"{[10,30), [40,60), [61,90)}",
		},
		{
			"超过 1 号位右边：超过下下一个元素左边",
			61, 11,
			"{[10,30), [40,60), [61,90)}",
		},
		{
			"超过 1 号位右边：与下下一个元素右边相等",
			61, 29,
			"{[10,30), [40,60), [61,90)}",
		},
		{
			"超过 1 号位右边：超过下下一个元素右边",
			61, 30,
			"{[10,30), [40,60), [61,91)}",
		},
		{
			"与 2 号位左边接壤：与下一个元素左边接壤",
			69, 1,
			"{[10,30), [40,60), [69,90)}",
		},
		{
			"与 2 号位左边接壤：与下一个元素左边相等",
			69, 2,
			"{[10,30), [40,60), [69,90)}",
		},
		{
			"与 2 号位左边接壤：超过下一个元素左边",
			69, 3,
			"{[10,30), [40,60), [69,90)}",
		},
		{
			"与 2 号位左边接壤：与下一个元素右边相等",
			69, 21,
			"{[10,30), [40,60), [69,90)}",
		},
		{
			"与 2 号位左边接壤：超过下一个元素右边",
			69, 22,
			"{[10,30), [40,60), [69,91)}",
		},
		{
			"与 2 号位左边相等：超过下一个元素左边",
			70, 1,
			"{[10,30), [40,60), [70,90)}",
		},
		{
			"与 2 号位左边相等：与下一个元素右边相等",
			70, 20,
			"{[10,30), [40,60), [70,90)}",
		},
		{
			"与 2 号位左边相等：超过下一个元素右边",
			70, 21,
			"{[10,30), [40,60), [70,91)}",
		},
		{
			"超过 2 号位左边：超过下一个元素左边",
			71, 1,
			"{[10,30), [40,60), [70,90)}",
		},
		{
			"超过 2 号位左边：与下一个元素右边相等",
			71, 19,
			"{[10,30), [40,60), [70,90)}",
		},
		{
			"超过 2 号位左边：超过下一个元素右边",
			71, 20,
			"{[10,30), [40,60), [70,91)}",
		},
		{
			"与 2 号位右边相等：超过下一个元素右边",
			89, 1,
			"{[10,30), [40,60), [70,90)}",
		},
		{
			"与 2 号位右边接壤：超过下一个元素右边",
			90, 1,
			"{[10,30), [40,60), [70,91)}",
		},
		{
			"超过 2 号位右边：超过下一个元素右边",
			91, 1,
			"{[10,30), [40,60), [70,90), [91,92)}",
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			m := newCoordinateAxisMarker(t)
			m.Mark(tt.offset, tt.length)
			if m.String() != tt.expectedResult {
				t.Errorf("unexpected result: want %v, got %v", tt.expectedResult, m.String())
			}
		})
	}
}

func TestAxisMarker_Get(t *testing.T) {
	tests := []struct {
		name           string
		offset, length int
		expectedResult int
	}{
		{
			"最左边",
			9, 1,
			0,
		},
		{
			"最左边",
			9, 2,
			0,
		},
		{
			"与 0 号位左边相等",
			10, 1,
			1,
		},
		{
			"与 0 号位左边相等",
			10, 0,
			0,
		},
		{
			"与 0 号位左边相等",
			11, -1,
			1,
		},
		{
			"与 0 号位左边相等",
			10, 2,
			2,
		},
		{
			"与 0 号位左边相等",
			10, 20,
			20,
		},
		{
			"与 0 号位左边相等",
			10, 21,
			20,
		},
		{
			"超过 0 号位左边",
			11, 1,
			1,
		},
		{
			"超过 0 号位左边",
			11, 19,
			19,
		},
		{
			"超过 0 号位左边",
			11, 20,
			19,
		},
		{
			"与 0 号位右边相等",
			29, 1,
			1,
		},
		{
			"与 0 号位右边相等",
			29, 2,
			1,
		},
		{
			"超过 0 号位右边",
			30, 1,
			0,
		},
		{
			"超过 0 号位右边",
			30, 11,
			0,
		},
		{
			"与 1 号位左边相等",
			40, 1,
			1,
		},
		{
			"与 1 号位左边相等",
			40, 20,
			20,
		},
		{
			"与 1 号位左边相等",
			40, 21,
			20,
		},
		{
			"超过 1 号位左边",
			41, 1,
			1,
		},
		{
			"超过 1 号位左边",
			41, 19,
			19,
		},
		{
			"超过 1 号位左边",
			41, 20,
			19,
		},
		{
			"等于 1 号位右边",
			59, 1,
			1,
		},
		{
			"等于 1 号位右边",
			59, 2,
			1,
		},
		{
			"超过 1 号位右边",
			60, 1,
			0,
		},
		{
			"超过 1 号位右边",
			60, 10,
			0,
		},
		{
			"等于 2 号位左边",
			70, 1,
			1,
		},
		{
			"等于 2 号位左边",
			70, 20,
			20,
		},
		{
			"等于 2 号位左边",
			70, 21,
			20,
		},
		{
			"超过 2 号位左边",
			71, 1,
			1,
		},
		{
			"超过 2 号位左边",
			71, 19,
			19,
		},
		{
			"超过 2 号位左边",
			71, 20,
			19,
		},
		{
			"等于 2 号位右边",
			89, 1,
			1,
		},
		{
			"等于 2 号位右边",
			89, 2,
			1,
		},
		{
			"超过 2 号位右边",
			90, 1,
			0,
		},
		{
			"超过 2 号位右边",
			90, 10,
			0,
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			m := newCoordinateAxisMarker(t)
			var result int
			if rand.Intn(2) == 1 && tt.offset >= 0 && tt.length >= 0 {
				result = int(min(int64(tt.length), m.GetMaxMarkLine(int64(tt.offset))))
			} else {
				result = m.Get(tt.offset, tt.length)
			}
			if result != tt.expectedResult {
				t.Errorf("unexpected result: want %v, got %v", tt.expectedResult, result)
			}
		})
	}
}

func TestAxisMarker(t *testing.T) {
	t.Run("随机长度写入，每个点只标记一次", func(t *testing.T) {
		for i := 0; i < 100; i++ {
			data := make([]int, 1024*1024*(rand.Intn(5)+1)+10)
			parts := Split(data)
			axisMarker := &iu.AxisMarker{}
			for _, v := range parts {
				axisMarker.Mark(v.Offset, v.End-v.Offset)
			}
			expectedResult := fmt.Sprintf("{[0,%d)}", len(data))
			if axisMarker.String() != expectedResult {
				t.Errorf("unexpected result: want %v, got %v", expectedResult, axisMarker.String())
			}
		}
	})

	t.Run("随机长度写入，有些点多次标记", func(t *testing.T) {
		for i := 0; i < 100; i++ {
			data := make([]int, 1024*1024*(rand.Intn(5)+1)+10)
			parts := Split(data)
			offset := rand.Intn(len(data))
			data2 := Split(data[offset:])
			axisMarker := &iu.AxisMarker{}
			for _, v := range parts {
				axisMarker.Mark(v.Offset, v.End-v.Offset)
			}
			for _, v := range data2 {
				axisMarker.Mark(offset+v.Offset, v.End-v.Offset)
			}
			expectedResult := fmt.Sprintf("{[0,%d)}", len(data))
			if axisMarker.String() != expectedResult {
				t.Errorf("unexpected result: want %v, got %v", expectedResult, axisMarker.String())
			}
		}
	})
}

func newCoordinateAxisMarker(t *testing.T) *iu.AxisMarker {
	marker := &iu.AxisMarker{}
	marker.Mark(10, 20)
	expectedResult := "{[10,30)}"
	if marker.String() != expectedResult {
		t.Errorf("unexpected result: want %s, got %s", expectedResult, marker.String())
	}
	marker.Mark(40, 20)
	expectedResult = "{[10,30), [40,60)}"
	if marker.String() != expectedResult {
		t.Errorf("unexpected result: want %s, got %s", expectedResult, marker.String())
	}
	marker.Mark(70, 20)
	expectedResult = "{[10,30), [40,60), [70,90)}"
	if marker.String() != expectedResult {
		t.Errorf("unexpected result: want %s, got %s", expectedResult, marker.String())
	}
	return marker
}
